{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sourcedataset",
						"type": "DatasetReference"
					},
					"name": "sourcecsv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sinkdataflow",
						"type": "DatasetReference"
					},
					"name": "sinkdata"
				}
			],
			"transformations": [
				{
					"name": "selectedrequiredcolumns"
				},
				{
					"name": "filterbasedconition"
				},
				{
					"name": "conditionalsplit"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregateTransformation"
				},
				{
					"name": "sortingcolumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as short,",
				"          transactional_date as timestamp,",
				"          product_id as string,",
				"          customer_id as short,",
				"          payment as string,",
				"          credit_card as long,",
				"          loyalty_card as boolean,",
				"          cost as double,",
				"          quantity as short,",
				"          price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcecsv",
				"sourcecsv select(mapColumn(",
				"          transaction_id,",
				"          transactional_date,",
				"          product_id,",
				"          customer_id,",
				"          payment,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectedrequiredcolumns",
				"selectedrequiredcolumns filter(customer_id!=12) ~> filterbasedconition",
				"filterbasedconition split(payment=='mastercard',",
				"     payment=='visa',",
				"     payment=='americanexpress',",
				"     payment=='NULL',",
				"     disjoint: false) ~> conditionalsplit@(Mastercard, visa, amex, payme)",
				"conditionalsplit@amex derive(payment = coalesce(payment,'N/A')) ~> derivedColumn1",
				"conditionalsplit@Mastercard aggregate(groupBy(customer_id),",
				"     price = 'Min:' + toString(min(price)) + ' Max:' + toString(max(price))) ~> aggregateTransformation",
				"aggregateTransformation sort(asc(customer_id, true)) ~> sortingcolumns",
				"sortingcolumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkdata"
			]
		}
	}
}